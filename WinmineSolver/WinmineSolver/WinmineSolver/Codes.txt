************************************** App.xaml *******

<Application x:Class="WinmineSolver.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             Startup="App_OnStartup"
             DispatcherUnhandledException="App_OnDispatcherUnhandledException">
    <Application.Resources>
         
    </Application.Resources>
</Application>


		private void App_OnDispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)
		{
			MessageBox.Show(e.Exception.ToString());
			e.Handled = true;
			Environment.Exit(-1);
		}

		private void App_OnStartup(object sender, StartupEventArgs e)
		{
			var catalog = new AssemblyCatalog(Assembly.GetExecutingAssembly());
			var container = new CompositionContainer(catalog);
			var mainWindow = container.GetExportedValue<MainWindow>();
			mainWindow.Show();
		}








************************************** MainWindow.xaml *******

<Grid>
    <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="120" />
    </Grid.ColumnDefinitions>

    <RichTextBox x:Name="textbox"
                    FontFamily="Courier New"
                    IsReadOnly="True" />

    <StackPanel VerticalAlignment="Top" Grid.Column="1">
        <Button Content="Go!"
                Click="buttonGoClick"/>
        <Button Content="Прочитать доску"
                Margin="0,10,0,0"
                Click="buttonReadBoardClick"/>

        <Button Content="Показать движения"
                Margin="0,10,0,0"
                Click="buttonShowMousePropertiesClick"/>

        <Button Content="Записать движения"
                Margin="0,40,0,0"
                Click="buttonSaveMouseClick"/>
        <Button Content="Остановить запись"
                Margin="0,0,0,0"
                Click="buttonStopMouseClick"/>
    </StackPanel>
</Grid>


	[Export]
	public partial class MainWindow
	{
		private readonly IMouseHookSaveToFile mouseHookSaveToFile;
		private readonly IInputGenerator inputGenerator;
		private readonly IEyes eyes;

		[ImportingConstructor]
		public MainWindow(
			IMouseHookSaveToFile mouseHookSaveToFile, 
			IInputGenerator inputGenerator,
			IEyes eyes,
			IBoardLogger boardLogger)
		{
			this.inputGenerator = inputGenerator;
			this.eyes = eyes;
			this.mouseHookSaveToFile = mouseHookSaveToFile;
			
			InitializeComponent();

			boardLogger.SetOutput(textbox);
		}

		private void buttonGoClick(object sender, RoutedEventArgs e)
		{
			for (var i = 0; i < 10; i++)
			{
				eyes.Look();
			}
		}

		private void buttonSaveMouseClick(object sender, RoutedEventArgs e)
		{
			mouseHookSaveToFile.Hook();
		}

		private void buttonStopMouseClick(object sender, RoutedEventArgs e)
		{
			mouseHookSaveToFile.Unhook();
		}

		private void buttonShowMousePropertiesClick(object sender, RoutedEventArgs e)
		{
			MessageBox.Show(inputGenerator.ToString());
		}

		private void buttonReadBoardClick(object sender, RoutedEventArgs e)
		{
			eyes.LookFleetly();
		}
	}










************************************** Cell *******

	public enum Cell
	{
		Unknown,
		Unopened,
		Zero,
		One,
		Two,
		Three,
		Four,
		Five,
		Six,
		Seven,
		Eight,
		Mine,
		Flag
	}







************************************** Board *******

	public class Board
	{
		public Board(Cell[,] cells)
		{
			Cells = cells;
		}

		public readonly Cell[,] Cells;

		public int Width { get { return Cells.GetUpperBound(0); } }
		public int Height { get { return Cells.GetUpperBound(1); } }

		public override string ToString()
		{
			var sb = new StringBuilder();

			for (var y = 0; y <= Height; y++)
			{
				for (var x = 0; x <= Width; x++)
				{
					var cell = Cells[x, y];
					sb.Append(CellTypeToString(cell));
				}
				sb.AppendLine();
			}

			return sb.ToString();
		}

		private static string CellTypeToString(Cell cell)
		{
			if (cell == Cell.Unknown) return "?";
			if (cell == Cell.Unopened) return ".";
			if (cell == Cell.Zero) return "0";
			if (cell == Cell.One) return "1";
			if (cell == Cell.Two) return "2";
			if (cell == Cell.Three) return "3";
			if (cell == Cell.Four) return "4";
			if (cell == Cell.Five) return "5";
			if (cell == Cell.Six) return "6";
			if (cell == Cell.Seven) return "7";
			if (cell == Cell.Eight) return "8";
			if (cell == Cell.Mine) return "*";
			if (cell == Cell.Flag) return "#";
			throw new InvalidOperationException();
		} 
	}













************************************** BoardLogger *******

	[InheritedExport]
	public interface IBoardLogger
	{
		void SetOutput(RichTextBox _textbox);
		void Log(Board board);
	}

	public class BoardLogger : IBoardLogger
	{
		private RichTextBox textbox;

		public void SetOutput(RichTextBox _textbox)
		{
			textbox = _textbox;
		}

		public void Log(Board board)
		{
			if (textbox == null)
				return;

			textbox.Document = new FlowDocument(new Paragraph(new Run(board.ToString())));
		}
	}







************************************** Eyes *******

	[InheritedExport]
	public interface IEyes
	{
		void Look();
		void LookFleetly();
	}

	public class Eyes : IEyes
	{
		private readonly IScreenCapturer screenCapturer;
		private readonly IBrain brain;
		private readonly IBoardLogger boardLogger;

		private const int cellSize = 16;
		private const int boardWidth = 30;
		private const int boardHeight = 16;

		private IntPtr hwnd = IntPtr.Zero;

		[ImportingConstructor]
		public Eyes(IScreenCapturer screenCapturer, IBrain brain, IBoardLogger boardLogger)
		{
			this.screenCapturer = screenCapturer;
			this.brain = brain;
			this.boardLogger = boardLogger;
		}

		public void Look()
		{
			EnsureHwnd();

			var board = GetBoard();

			var viewInfo = new ViewInfo
				               {
					               BoardHeight = boardHeight,
					               BoardWidth = boardWidth,
					               CellSize = cellSize,
					               Hwnd = hwnd,
				               };

			brain.Think(viewInfo, board);
		}

		public void LookFleetly()
		{
			EnsureHwnd();
			boardLogger.Log(GetBoard());
		}

		private Board GetBoard()
		{
			var bmp = screenCapturer.CaptureWindow(hwnd);

			var board = new Cell[boardWidth,boardHeight];

			try
			{
				for (var y = 0; y < boardHeight; y++)
				{
					for (var x = 0; x < boardWidth; x++)
					{
						var mean = CalcMeanColor(bmp, 15 + cellSize * x + 1, 100 + cellSize * y + 1, cellSize - 2);

						var cell = GetCell(mean);

						board[x, y] = cell;
					}
				}
			}
			catch (ArgumentOutOfRangeException)
			{
				bmp.Save("error.bmp");
				throw;
			}

			return new Board(board);
		}

		private void EnsureHwnd()
		{
			if (hwnd == IntPtr.Zero)
			{
				hwnd = screenCapturer.FindFirstWindow();
				User32.SetForegroundWindow(hwnd);
			}
		}

		private static Cell GetCell(Color color)
		{
			if (color.R == 132 && color.G == 139 && color.B == 157) return Cell.Unopened;
			if (color.R == 192 && color.G == 192 && color.B == 192) return Cell.Zero;
			if (color.R == 157 && color.G == 157 && color.B == 195) return Cell.One;
			if (color.R == 135 && color.G == 178 && color.B == 135) return Cell.Two;
			if (color.R == 203 && color.G == 131 && color.B == 131) return Cell.Three;
			if (color.R == 137 && color.G == 137 && color.B == 173) return Cell.Four;
			if (color.R == 169 && color.G == 169 && color.B == 123) return Cell.Five;
			if (color.R == 84 && color.G == 88 && color.B == 99) return Cell.Mine;
			if (color.R == 154 && color.G == 10 && color.B == 10) return Cell.Mine;
			if (color.R == 100 && color.G == 106 && color.B == 138) return Cell.Flag;
			return Cell.Unknown;
		}

		private static Color CalcMeanColor(Bitmap bmp, int x, int y, int size)
		{
			var r = 0;
			var g = 0;
			var b = 0;

			for (int xx = 0; xx < size; xx++)
				for (int yy = 0; yy < size; yy++)
				{
					var color = bmp.GetPixel(x + xx, y + yy);
					r += color.R;
					g += color.G;
					b += color.B;
				}

			var total = size * size;

			return Color.FromArgb(r / total, g / total, b / total);
		}
	}









************************************** InputGenerator *******

	public interface IInputGenerator
	{
		void MoveMouseAbsolute(int x, int y);
		void DoMouseClick();
	}


	public class SimpleInputGenerator : IInputGenerator
	{
		private readonly int width;
		private readonly int height;

		public SimpleInputGenerator()
		{
			width = System.Windows.Forms.Screen.PrimaryScreen.Bounds.Width;
			height = System.Windows.Forms.Screen.PrimaryScreen.Bounds.Height;
		}

		public void MoveMouseAbsolute(int x, int y)
		{
			var xx = x * 65536 / width;
			var yy = y * 65536 / height;

			const User32.MouseEvent dwFlags = User32.MouseEvent.MOUSEEVENTF_MOVE | User32.MouseEvent.MOUSEEVENTF_ABSOLUTE;

			User32.mouse_event((uint)dwFlags, xx, yy, 0, IntPtr.Zero);
		}

		public void DoMouseClick()
		{
			User32.mouse_event((uint)(User32.MouseEvent.MOUSEEVENTF_LEFTDOWN | User32.MouseEvent.MOUSEEVENTF_LEFTUP), 0, 0, 0, IntPtr.Zero);
		}
	}









************************************** Hands *******

	[InheritedExport]
	public interface IHands
	{
		void ClickToNewGame(ViewInfo viewInfo);
		void Click(ViewInfo viewInfo, int x, int y);
	}

	public class Hands : IHands
	{
		private readonly IInputGenerator inputGenerator;
		private readonly IScreenCapturer screenCapturer;

		[ImportingConstructor]
		public Hands(IInputGenerator inputGenerator, IScreenCapturer screenCapturer)
		{
			this.inputGenerator = inputGenerator;
			this.screenCapturer = screenCapturer;
		}

		public void ClickToNewGame(ViewInfo viewInfo)
		{
			var lu = screenCapturer.GetWindowLUPoint(viewInfo.Hwnd);
			inputGenerator.MoveMouseAbsolute((int)(lu.X + 260), (int)(lu.Y + 80));
			inputGenerator.DoMouseClick();
		}

		public void Click(ViewInfo viewInfo, int x, int y)
		{
			var lu = screenCapturer.GetWindowLUPoint(viewInfo.Hwnd);
			inputGenerator.MoveMouseAbsolute((int)(lu.X + 23 + viewInfo.CellSize * x), (int)(lu.Y + 108 + viewInfo.CellSize * y));
			inputGenerator.DoMouseClick();
		}
	}








************************************** Brain *******
	
	[InheritedExport]
	public interface IBrain
	{
		void Think(ViewInfo viewInfo, Board board);
	}

	public class Brain : IBrain
	{
		private readonly IHands hands;
		private readonly Random rand;

		[ImportingConstructor]
		public Brain(IHands hands)
		{
			this.hands = hands;
			rand = new Random();
		}

		public void Think(ViewInfo viewInfo, Board board)
		{
			if (GameFinished(board))
				hands.ClickToNewGame(viewInfo);

			hands.Click(viewInfo, rand.Next(viewInfo.BoardWidth), rand.Next(viewInfo.BoardHeight));
		}

		private static bool GameFinished(Board board)
		{
			for (var y = 0; y < board.Height; y++)
				for (var x = 0; x < board.Width; x++)
					if (board.Cells[x, y] == Cell.Mine)
						return true;
			return false;
		}
	}


