1. Постановка задачи
2. Общая архитектура

3. Создать новое WPF приложение
4. Подготовить контейнер в App.xaml: Настройка контейнера и обработка ошибок
5. Положить MainWindow в контейнер, обьяснить почему регистрация не на интерфейс
6. Создать пользовательский интерфейс MainWindow.xaml

7. Задача: вывести доску в RichTextBox
	Создать enum Cell
	Создать класс Board
	Создать класс BoardLogger, обьяснить почему у него есть метод SetOutput
	Вывести Board созданный вручную

8. Задача: распознать доску
	Скопировать классы WinAPI и ScreenCapturer, рассказать про них
	Создать класс Eyes по методам, без использования класса Brain
	Вывести распознанный Board

9. Задача: кликать
	Создать класс InputGenerator на основе SimpleInputGenerator и IInputGenerator
	Создать класс Hands
	Создать класс Brain
	Связать Eyes => Brain, MainWindow => Eyes
	Показать кликер

10. Задача сложные движения
	Краткий вариант:
		Переименовать InputGenerator в SimpleInputGenerator
		Скопировать папку Mouse
		Переключить на HumanLikeInputGenerator
		Поправить MainWindow
		Скопировать mouse.txt
		Демонстрация

	Полный вариант:
		Переименовать InputGenerator в SimpleInputGenerator
		Скопировать структуры MouseTrailInfo, MouseMovementInfo
		Скопировать классы по записи MouseHook, MouseHookSaveToFile
		Записать движения, показать записанный файл
		Скопировать ExtraMath, MouseMovementsFileParser, MouseTrailCollection, HumanLikeInputGenerator
		Прочитать движения, показать свойства
		Переключить на HumanLikeInputGenerator
		Демонстрация

11. Заключение
	Алгоритм решения доски

// Осталось
Вывод незнакомого цвета в MessageBox - доделать IBoardLogger


************************** Интерфейсы

	public interface IScreenCapturer
	{
		Point GetWindowLUPoint(IntPtr handle);
		Bitmap CaptureWindow(IntPtr handle);
		IntPtr FindFirstWindow();
	}

	public interface IHands
	{
		void ClickToNewGame(ViewInfo viewInfo);
		void Click(ViewInfo viewInfo, int x, int y);
	}

	public interface IEyes
	{
		void Look();
		void LookFleetly();
	}

	public interface IBrain
	{
		void Think(ViewInfo viewInfo, Board board);
	}

	public interface IBoardLogger
	{
		void SetOutput(RichTextBox _textbox);
		void Log(Board board);
	}

	public interface IMouseTrailCollection
	{
		MouseTrailInfo GetRandomTrail();
	}

	public interface IMouseHookSaveToFile
	{
		void Hook();
		void Unhook();
	}

	public interface IInputGenerator
	{
		void MoveMouseAbsolute(int x, int y);
		void DoMouseClick();
	}